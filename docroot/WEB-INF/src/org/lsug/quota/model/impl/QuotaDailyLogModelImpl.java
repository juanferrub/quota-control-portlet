/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lsug.quota.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lsug.quota.model.QuotaDailyLog;
import org.lsug.quota.model.QuotaDailyLogModel;
import org.lsug.quota.model.QuotaDailyLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the QuotaDailyLog service. Represents a row in the &quot;LSUGQUOTA_QuotaDailyLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lsug.quota.model.QuotaDailyLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotaDailyLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotaDailyLogImpl
 * @see org.lsug.quota.model.QuotaDailyLog
 * @see org.lsug.quota.model.QuotaDailyLogModel
 * @generated
 */
@JSON(strict = true)
public class QuotaDailyLogModelImpl extends BaseModelImpl<QuotaDailyLog>
	implements QuotaDailyLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quota daily log model instance should use the {@link org.lsug.quota.model.QuotaDailyLog} interface instead.
	 */
	public static final String TABLE_NAME = "LSUGQUOTA_QuotaDailyLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "quotaDailyLogId", Types.BIGINT },
			{ "dayAnalyzed", Types.TIMESTAMP },
			{ "quotaId", Types.BIGINT },
			{ "quotaAssigned", Types.BIGINT },
			{ "quotaUsed", Types.BIGINT },
			{ "quotaStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LSUGQUOTA_QuotaDailyLog (quotaDailyLogId LONG not null primary key,dayAnalyzed DATE null,quotaId LONG,quotaAssigned LONG,quotaUsed LONG,quotaStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LSUGQUOTA_QuotaDailyLog";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lsug.quota.model.QuotaDailyLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lsug.quota.model.QuotaDailyLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lsug.quota.model.QuotaDailyLog"),
			true);
	public static long DAYANALYZED_COLUMN_BITMASK = 1L;
	public static long QUOTAID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static QuotaDailyLog toModel(QuotaDailyLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QuotaDailyLog model = new QuotaDailyLogImpl();

		model.setQuotaDailyLogId(soapModel.getQuotaDailyLogId());
		model.setDayAnalyzed(soapModel.getDayAnalyzed());
		model.setQuotaId(soapModel.getQuotaId());
		model.setQuotaAssigned(soapModel.getQuotaAssigned());
		model.setQuotaUsed(soapModel.getQuotaUsed());
		model.setQuotaStatus(soapModel.getQuotaStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<QuotaDailyLog> toModels(QuotaDailyLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<QuotaDailyLog> models = new ArrayList<QuotaDailyLog>(soapModels.length);

		for (QuotaDailyLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lsug.quota.model.QuotaDailyLog"));

	public QuotaDailyLogModelImpl() {
	}

	public long getPrimaryKey() {
		return _quotaDailyLogId;
	}

	public void setPrimaryKey(long primaryKey) {
		setQuotaDailyLogId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_quotaDailyLogId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return QuotaDailyLog.class;
	}

	public String getModelClassName() {
		return QuotaDailyLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("quotaDailyLogId", getQuotaDailyLogId());
		attributes.put("dayAnalyzed", getDayAnalyzed());
		attributes.put("quotaId", getQuotaId());
		attributes.put("quotaAssigned", getQuotaAssigned());
		attributes.put("quotaUsed", getQuotaUsed());
		attributes.put("quotaStatus", getQuotaStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long quotaDailyLogId = (Long)attributes.get("quotaDailyLogId");

		if (quotaDailyLogId != null) {
			setQuotaDailyLogId(quotaDailyLogId);
		}

		Date dayAnalyzed = (Date)attributes.get("dayAnalyzed");

		if (dayAnalyzed != null) {
			setDayAnalyzed(dayAnalyzed);
		}

		Long quotaId = (Long)attributes.get("quotaId");

		if (quotaId != null) {
			setQuotaId(quotaId);
		}

		Long quotaAssigned = (Long)attributes.get("quotaAssigned");

		if (quotaAssigned != null) {
			setQuotaAssigned(quotaAssigned);
		}

		Long quotaUsed = (Long)attributes.get("quotaUsed");

		if (quotaUsed != null) {
			setQuotaUsed(quotaUsed);
		}

		Integer quotaStatus = (Integer)attributes.get("quotaStatus");

		if (quotaStatus != null) {
			setQuotaStatus(quotaStatus);
		}
	}

	@JSON
	public long getQuotaDailyLogId() {
		return _quotaDailyLogId;
	}

	public void setQuotaDailyLogId(long quotaDailyLogId) {
		_quotaDailyLogId = quotaDailyLogId;
	}

	@JSON
	public Date getDayAnalyzed() {
		return _dayAnalyzed;
	}

	public void setDayAnalyzed(Date dayAnalyzed) {
		_columnBitmask |= DAYANALYZED_COLUMN_BITMASK;

		if (_originalDayAnalyzed == null) {
			_originalDayAnalyzed = _dayAnalyzed;
		}

		_dayAnalyzed = dayAnalyzed;
	}

	public Date getOriginalDayAnalyzed() {
		return _originalDayAnalyzed;
	}

	@JSON
	public long getQuotaId() {
		return _quotaId;
	}

	public void setQuotaId(long quotaId) {
		_columnBitmask |= QUOTAID_COLUMN_BITMASK;

		if (!_setOriginalQuotaId) {
			_setOriginalQuotaId = true;

			_originalQuotaId = _quotaId;
		}

		_quotaId = quotaId;
	}

	public long getOriginalQuotaId() {
		return _originalQuotaId;
	}

	@JSON
	public long getQuotaAssigned() {
		return _quotaAssigned;
	}

	public void setQuotaAssigned(long quotaAssigned) {
		_quotaAssigned = quotaAssigned;
	}

	@JSON
	public long getQuotaUsed() {
		return _quotaUsed;
	}

	public void setQuotaUsed(long quotaUsed) {
		_quotaUsed = quotaUsed;
	}

	@JSON
	public int getQuotaStatus() {
		return _quotaStatus;
	}

	public void setQuotaStatus(int quotaStatus) {
		_quotaStatus = quotaStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			QuotaDailyLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotaDailyLog toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (QuotaDailyLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		QuotaDailyLogImpl quotaDailyLogImpl = new QuotaDailyLogImpl();

		quotaDailyLogImpl.setQuotaDailyLogId(getQuotaDailyLogId());
		quotaDailyLogImpl.setDayAnalyzed(getDayAnalyzed());
		quotaDailyLogImpl.setQuotaId(getQuotaId());
		quotaDailyLogImpl.setQuotaAssigned(getQuotaAssigned());
		quotaDailyLogImpl.setQuotaUsed(getQuotaUsed());
		quotaDailyLogImpl.setQuotaStatus(getQuotaStatus());

		quotaDailyLogImpl.resetOriginalValues();

		return quotaDailyLogImpl;
	}

	public int compareTo(QuotaDailyLog quotaDailyLog) {
		long primaryKey = quotaDailyLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		QuotaDailyLog quotaDailyLog = null;

		try {
			quotaDailyLog = (QuotaDailyLog)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = quotaDailyLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		QuotaDailyLogModelImpl quotaDailyLogModelImpl = this;

		quotaDailyLogModelImpl._originalDayAnalyzed = quotaDailyLogModelImpl._dayAnalyzed;

		quotaDailyLogModelImpl._originalQuotaId = quotaDailyLogModelImpl._quotaId;

		quotaDailyLogModelImpl._setOriginalQuotaId = false;

		quotaDailyLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotaDailyLog> toCacheModel() {
		QuotaDailyLogCacheModel quotaDailyLogCacheModel = new QuotaDailyLogCacheModel();

		quotaDailyLogCacheModel.quotaDailyLogId = getQuotaDailyLogId();

		Date dayAnalyzed = getDayAnalyzed();

		if (dayAnalyzed != null) {
			quotaDailyLogCacheModel.dayAnalyzed = dayAnalyzed.getTime();
		}
		else {
			quotaDailyLogCacheModel.dayAnalyzed = Long.MIN_VALUE;
		}

		quotaDailyLogCacheModel.quotaId = getQuotaId();

		quotaDailyLogCacheModel.quotaAssigned = getQuotaAssigned();

		quotaDailyLogCacheModel.quotaUsed = getQuotaUsed();

		quotaDailyLogCacheModel.quotaStatus = getQuotaStatus();

		return quotaDailyLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{quotaDailyLogId=");
		sb.append(getQuotaDailyLogId());
		sb.append(", dayAnalyzed=");
		sb.append(getDayAnalyzed());
		sb.append(", quotaId=");
		sb.append(getQuotaId());
		sb.append(", quotaAssigned=");
		sb.append(getQuotaAssigned());
		sb.append(", quotaUsed=");
		sb.append(getQuotaUsed());
		sb.append(", quotaStatus=");
		sb.append(getQuotaStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.lsug.quota.model.QuotaDailyLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>quotaDailyLogId</column-name><column-value><![CDATA[");
		sb.append(getQuotaDailyLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dayAnalyzed</column-name><column-value><![CDATA[");
		sb.append(getDayAnalyzed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotaId</column-name><column-value><![CDATA[");
		sb.append(getQuotaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotaAssigned</column-name><column-value><![CDATA[");
		sb.append(getQuotaAssigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotaUsed</column-name><column-value><![CDATA[");
		sb.append(getQuotaUsed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotaStatus</column-name><column-value><![CDATA[");
		sb.append(getQuotaStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = QuotaDailyLog.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			QuotaDailyLog.class
		};
	private long _quotaDailyLogId;
	private Date _dayAnalyzed;
	private Date _originalDayAnalyzed;
	private long _quotaId;
	private long _originalQuotaId;
	private boolean _setOriginalQuotaId;
	private long _quotaAssigned;
	private long _quotaUsed;
	private int _quotaStatus;
	private long _columnBitmask;
	private QuotaDailyLog _escapedModelProxy;
}